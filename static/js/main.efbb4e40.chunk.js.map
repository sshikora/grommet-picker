{"version":3,"sources":["components/picker/PickerDemo.js","components/dropdown/DropdownDemo.js","App.js","serviceWorker.js","index.js"],"names":["state","onSelectSingle","date","setState","onSelectRange","selectedDate","dates","previousSelectedDate","priorDates","map","d","Date","previousDate","nextDate","getTime","priorDate","undefined","this","dateString","toLocaleDateString","TextInput","placeholder","value","Calendar","a11yTitle","onSelect","Component","DropdownDemo","React","useState","setValue","Select","options","onChange","option","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4fAIEA,MAAQ,G,EAERC,eAAiB,SAAAC,GAAI,OAAI,EAAKC,SAAS,CAAED,U,EAEzCE,cAAgB,SAACC,GAAkB,IAAD,EACc,EAAKL,MAA3CE,EADwB,EACxBA,KAAMI,EADkB,EAClBA,MAAOC,EADW,EACXA,qBACrB,GAAKD,EAYE,CACL,IAAME,EAAaF,EAAM,GAAGG,KAAI,SAAAC,GAAC,OAAI,IAAIC,KAAKD,MACxCE,EAAe,IAAID,KAAKJ,GACxBM,EAAW,IAAIF,KAAKN,GACtBQ,EAASC,UAAYF,EAAaE,UAChCD,EAASC,UAAYN,EAAW,GAAGM,UACrC,EAAKX,SAAS,CAAEG,MAAO,CAAC,CAACD,EAAcC,EAAM,GAAG,OACvCO,EAASC,UAAYN,EAAW,GAAGM,WAC5C,EAAKX,SAAS,CAAEG,MAAO,CAAC,CAACA,EAAM,GAAG,GAAID,MAE/BQ,EAASC,UAAYF,EAAaE,YACvCD,EAASC,UAAYN,EAAW,GAAGM,UACrC,EAAKX,SAAS,CAAEG,MAAO,CAAC,CAACA,EAAM,GAAG,GAAID,MAC7BQ,EAASC,UAAYN,EAAW,GAAGM,WAC5C,EAAKX,SAAS,CAAEG,MAAO,CAAC,CAACD,EAAcC,EAAM,GAAG,aAzBpD,GAAKJ,EAEE,CACL,IAAMa,EAAY,IAAIJ,KAAKT,GACrBW,EAAW,IAAIF,KAAKN,GACtBU,EAAUD,UAAYD,EAASC,UACjC,EAAKX,SAAS,CAAED,UAAMc,EAAWV,MAAO,CAAC,CAACJ,EAAMG,MACvCU,EAAUD,UAAYD,EAASC,WACxC,EAAKX,SAAS,CAAED,UAAMc,EAAWV,MAAO,CAAC,CAACD,EAAcH,WAP1D,EAAKC,SAAS,CAAED,KAAMG,IA4B1B,EAAKF,SAAS,CAAEI,qBAAsBF,K,uDAG9B,IAAD,EACiBY,KAAKjB,MAArBE,EADD,EACCA,KAAMI,EADP,EACOA,MACVY,EAAa,GACbhB,IAEFgB,EADqB,IAAIP,KAAKT,GACJiB,mBAAmB,UAG/C,OACE,6BACE,kBAACC,EAAA,EAAD,CACEC,YAAY,OACZC,MAAOJ,IAET,kBAACK,EAAA,EAAD,CACEC,UAAW,kBACXtB,KAAMA,EACNI,MAAOA,EACPmB,SAAUR,KAAKhB,sB,GA1DIyB,a,gBCWdC,MAXf,WAAyB,IAAD,EACIC,IAAMC,SAAS,UADnB,mBACfP,EADe,KACRQ,EADQ,KAEtB,OACE,kBAACC,EAAA,EAAD,CACEC,QAAS,CAAC,QAAS,SAAU,SAC7BV,MAAOA,EACPW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBJ,EAASI,OCO1BC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.efbb4e40.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Calendar, TextInput } from 'grommet';\n\nexport default class extends Component {\n  state = {}\n\n  onSelectSingle = date => this.setState({ date })\n\n  onSelectRange = (selectedDate) => {\n    const { date, dates, previousSelectedDate } = this.state;\n    if (!dates) {\n      if (!date) {\n        this.setState({ date: selectedDate });\n      } else {\n        const priorDate = new Date(date);\n        const nextDate = new Date(selectedDate);\n        if (priorDate.getTime() < nextDate.getTime()) {\n          this.setState({ date: undefined, dates: [[date, selectedDate]] });\n        } else if (priorDate.getTime() > nextDate.getTime()) {\n          this.setState({ date: undefined, dates: [[selectedDate, date]] });\n        }\n      }\n    } else {\n      const priorDates = dates[0].map(d => new Date(d));\n      const previousDate = new Date(previousSelectedDate);\n      const nextDate = new Date(selectedDate);\n      if (nextDate.getTime() < previousDate.getTime()) {\n        if (nextDate.getTime() < priorDates[0].getTime()) {\n          this.setState({ dates: [[selectedDate, dates[0][1]]] });\n        } else if (nextDate.getTime() > priorDates[0].getTime()) {\n          this.setState({ dates: [[dates[0][0], selectedDate]] });\n        }\n      } else if (nextDate.getTime() > previousDate.getTime()) {\n        if (nextDate.getTime() > priorDates[1].getTime()) {\n          this.setState({ dates: [[dates[0][0], selectedDate]] });\n        } else if (nextDate.getTime() < priorDates[1].getTime()) {\n          this.setState({ dates: [[selectedDate, dates[0][1]]] });\n        }\n      }\n    }\n    this.setState({ previousSelectedDate: selectedDate });\n  }\n\n  render() {\n    const { date, dates } = this.state;\n    let dateString = '';\n    if (date){\n      const selectedDate = new Date(date);\n      dateString = selectedDate.toLocaleDateString(\"en-US\");\n    }\n\n    return (\n      <div>\n        <TextInput\n          placeholder=\"date\"\n          value={dateString}\n        />\n        <Calendar\n          a11yTitle={\"Calendar Date 1\"}\n          date={date}\n          dates={dates}\n          onSelect={this.onSelectSingle}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Select } from 'grommet';\n\nfunction DropdownDemo() {\n  const [value, setValue] = React.useState('medium');\n  return (\n    <Select\n      options={['small', 'medium', 'large']}\n      value={value}\n      onChange={({ option }) => setValue(option)}\n    />\n  );\n}\n\nexport default DropdownDemo;\n","import React from 'react';\nimport './App.css';\nimport PickerDemo from './components/picker/PickerDemo'\nimport DropdownDemo from './components/dropdown/DropdownDemo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PickerDemo>\n      </PickerDemo>\n      <DropdownDemo>\n      </DropdownDemo>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}